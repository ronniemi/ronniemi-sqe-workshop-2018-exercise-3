import assert from 'assert';
import {symbolic_substitutio, color_code} from '../src/js/code-coloring';

describe('symbolic_substitutio', () => {
    it('is substitute an empty function correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('')), '[{\"type\":\"Program\",\"body\":[],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":0,\"column\":0},\"end\":{\"line\":0,\"column\":0}}},[]]');
    });

    it('is substitute a function with no argument correctly', () => {
        assert.equal(JSON.stringify(symbolic_substitutio('function func(){}')),
        '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[],\"loc\":{\"start\":{\"line\":1,\"column\":15},\"end\":{\"line\":1,\"column\":17}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":17}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":17}}},[{\"start\":1,\"end\":1}]]');
    });

    it('is substitute a function with argument correctly', () => {
        assert.equal(JSON.stringify(symbolic_substitutio('function func(a){}')),
        '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":18}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":18}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":18}}},[{\"start\":1,\"end\":1}]]');
    });
    it('is substitute a function with body correctly', () => {
        assert.equal(JSON.stringify(symbolic_substitutio('function func(){a=5}')),
        '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},\"right\":{\"type\":\"Identifier\",\"name\":\"5\",\"loc\":{\"start\":{\"line\":1,\"column\":18},\"end\":{\"line\":1,\"column\":19}}},\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":19}}},\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":19}}}],\"loc\":{\"start\":{\"line\":1,\"column\":15},\"end\":{\"line\":1,\"column\":20}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":20}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":20}}},[{\"start\":1,\"end\":1}]]');
    });
    it('is substitute a left assignment', () => {
        assert.equal(JSON.stringify(symbolic_substitutio('function func(x){let a=x;if(a>5){a=4+a;return a;}return x;}')),
        '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":22}}},\"init\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":24}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":25}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":22}}},\"init\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":24}}}]},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":28},\"end\":{\"line\":1,\"column\":29}}},\"right\":{\"type\":\"Identifier\",\"name\":\"5\",\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":31}}},\"loc\":{\"start\":{\"line\":1,\"column\":28},\"end\":{\"line\":1,\"column\":31}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":34}}},\"right\":{\"type\":\"Identifier\",\"name\":\"4 + x\",\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":38}}},\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":38}}},\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":39}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"4 + x\",\"loc\":{\"start\":{\"line\":1,\"column\":46},\"end\":{\"line\":1,\"column\":47}}},\"loc\":{\"start\":{\"line\":1,\"column\":39},\"end\":{\"line\":1,\"column\":48}}}],\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":49}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":49}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":56},\"end\":{\"line\":1,\"column\":57}}},\"loc\":{\"start\":{\"line\":1,\"column\":49},\"end\":{\"line\":1,\"column\":58}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":59}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":59}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":59}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });
    /*it('is color a left assignment', () => {
        assert.equal(JSON.stringify(color_code('function func(x){let a=x;if(a>5){a=4+a;return a;}return x;}')),
        '{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":28},\"end\":{\"line\":1,\"column\":29}}},\"right\":{\"type\":\"Identifier\",\"name\":\"5\",\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":31}}},\"loc\":{\"start\":{\"line\":1,\"column\":28},\"end\":{\"line\":1,\"column\":31}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"4 + x\",\"loc\":{\"start\":{\"line\":1,\"column\":46},\"end\":{\"line\":1,\"column\":47}}},\"loc\":{\"start\":{\"line\":1,\"column\":39},\"end\":{\"line\":1,\"column\":48}}}],\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":49}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":49}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":56},\"end\":{\"line\":1,\"column\":57}}},\"loc\":{\"start\":{\"line\":1,\"column\":49},\"end\":{\"line\":1,\"column\":58}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":59}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":59}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":59}}}');
    });*/
});

describe('color_code', () => {
    it('is color an empty function correctly', () => {
        assert.equal(
            JSON.stringify(color_code('', [])), 
            '[]');
    });

    it('is color a function with no argument correctly', () => {
        assert.equal(JSON.stringify(color_code('function func(){}',[])),
        '[]');
    });

    it('is color a function with argument correctly', () => {
        assert.equal(JSON.stringify(color_code('function func(a){}',[1])),
        '[]');
    });
    it('is color a function with body correctly', () => {
        assert.equal(JSON.stringify(color_code('function func(){a=5}',[])),
        '[]');
    });
});

describe('if_statment', () => {
    it('is substitute var correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(){let a=0;if(a>1){return a;}}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":21}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":22},\"end\":{\"line\":1,\"column\":23}}},\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":23}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":24}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":21}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":22},\"end\":{\"line\":1,\"column\":23}}},\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":23}}}]},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"right\":{\"type\":\"Identifier\",\"name\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":29},\"end\":{\"line\":1,\"column\":30}}},\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":30}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":39},\"end\":{\"line\":1,\"column\":40}}},\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":41}}}],\"loc\":{\"start\":{\"line\":1,\"column\":31},\"end\":{\"line\":1,\"column\":42}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":42}}}],\"loc\":{\"start\":{\"line\":1,\"column\":15},\"end\":{\"line\":1,\"column\":43}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":43}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":43}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });
    it('is color red var correctly', () => {
        assert.equal(
            JSON.stringify(color_code('function func(){let a=0;if(a>1){return a;}}', [])), 
            '[{\"line\":1,\"cond\":false,\"type\":\"if\"}]');
    });

    it('is substitute arg correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x){if(x>1){return x;}}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":21}}},\"right\":{\"type\":\"Identifier\",\"name\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":22},\"end\":{\"line\":1,\"column\":23}}},\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":23}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":33}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":34}}}],\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":35}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":35}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":36}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":36}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":36}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });
    it('is color red arg correctly', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x){if(x>1){return x;}}', [1])), 
            '[{\"line\":1,\"cond\":false,\"type\":\"if\"}]');
    });

    it('is substitute global correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('let a=1;function func(){if(a>1){return a;}}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":5}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":6},\"end\":{\"line\":1,\"column\":7}}},\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":7}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":8}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":5}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":6},\"end\":{\"line\":1,\"column\":7}}},\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":7}}}]},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":21}}},\"params\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"right\":{\"type\":\"Identifier\",\"name\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":29},\"end\":{\"line\":1,\"column\":30}}},\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":30}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":39},\"end\":{\"line\":1,\"column\":40}}},\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":41}}}],\"loc\":{\"start\":{\"line\":1,\"column\":31},\"end\":{\"line\":1,\"column\":42}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":42}}}],\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":43}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":8},\"end\":{\"line\":1,\"column\":43}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":43}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });
    it('is color red global correctly', () => {
        assert.equal(
            JSON.stringify(color_code('let a=1;function func(){if(a>1){return a;}}', [])), 
            '[{\"line\":1,\"cond\":false,\"type\":\"if\"}]');
    });
    it('is substitute correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x,y,z){let a=x; if(a<z.length){y=a+3;return y;}return z[a];}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":1,\"column\":18},\"end\":{\"line\":1,\"column\":19}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"init\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":28}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":29}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"init\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":28}}}]},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":34}}},\"right\":{\"type\":\"Identifier\",\"name\":\"z.length\",\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":43}}},\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":43}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":45},\"end\":{\"line\":1,\"column\":46}}},\"right\":{\"type\":\"Identifier\",\"name\":\"a + 3\",\"loc\":{\"start\":{\"line\":1,\"column\":47},\"end\":{\"line\":1,\"column\":50}}},\"loc\":{\"start\":{\"line\":1,\"column\":45},\"end\":{\"line\":1,\"column\":50}}},\"loc\":{\"start\":{\"line\":1,\"column\":45},\"end\":{\"line\":1,\"column\":51}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":58},\"end\":{\"line\":1,\"column\":59}}},\"loc\":{\"start\":{\"line\":1,\"column\":51},\"end\":{\"line\":1,\"column\":60}}}],\"loc\":{\"start\":{\"line\":1,\"column\":44},\"end\":{\"line\":1,\"column\":61}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":61}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"z[a]\",\"loc\":{\"start\":{\"line\":1,\"column\":68},\"end\":{\"line\":1,\"column\":72}}},\"loc\":{\"start\":{\"line\":1,\"column\":61},\"end\":{\"line\":1,\"column\":73}}}],\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":74}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":74}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":74}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });
    it('is color correctly', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x,y,z){let a=x; if(a<z.length){y=a+3;return y;}return z[a];}',[1,2,[1,2,3]])), 
            '[{\"line\":1,\"cond\":true,\"type\":\"if\"}]');
    });
});

describe('update assignment', () => {
    it('is substitute suffix expression correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x){return x++;}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"x ++ \",\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":27}}},\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":28}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":29}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":29}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":29}}},[{\"start\":1,\"end\":1}]]');
    });
    it('is substitute prefix expression correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x){return ++x;}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\" ++ x\",\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":27}}},\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":28}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":29}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":29}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":29}}},[{\"start\":1,\"end\":1}]]');
    });
});

describe('unary_expression', () => {
    it('is substitute suffix expression correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x){x = -1;return x;}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":18}}},\"right\":{\"type\":\"Identifier\",\"name\":\" - 1\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":23}}},\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":23}}},\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":24}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":31},\"end\":{\"line\":1,\"column\":32}}},\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":33}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":34}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":34}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":34}}},[{\"start\":1,\"end\":1}]]');
    });
});

describe('member assignment', () => {
    it('is substitute correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x){return x[0];}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"x[0]\",\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":29}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":30}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":30}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":30}}},[{\"start\":1,\"end\":1}]]');
    });

    it('is coloring correctly', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x){return x[0];}',[[1,2]])), 
            '[]');
    });

    it('is substitute correctly in if statment', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x){let a=1; let b=2; if(x[a]<b)return x[b];}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":22}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":24}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":25}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":22}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":24}}}]},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":31}}},\"init\":{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":33}}},\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":33}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":26},\"end\":{\"line\":1,\"column\":34}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":31}}},\"init\":{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":33}}},\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":33}}}]},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"x[a]\",\"loc\":{\"start\":{\"line\":1,\"column\":38},\"end\":{\"line\":1,\"column\":42}}},\"right\":{\"type\":\"Identifier\",\"name\":\"2\",\"loc\":{\"start\":{\"line\":1,\"column\":43},\"end\":{\"line\":1,\"column\":44}}},\"loc\":{\"start\":{\"line\":1,\"column\":38},\"end\":{\"line\":1,\"column\":44}}},\"consequent\":{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"x[2]\",\"loc\":{\"start\":{\"line\":1,\"column\":52},\"end\":{\"line\":1,\"column\":56}}},\"loc\":{\"start\":{\"line\":1,\"column\":45},\"end\":{\"line\":1,\"column\":57}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":57}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":58}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":58}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":58}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });

    it('is coloring correctly in if statment', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x){let a=1; let b=2; if(x[a]<b)return x[b];}',[1,2,3])), 
            '[{\"line\":1,\"cond\":false,\"type\":\"if\"}]');
    });

    it('is substitute correctly length', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x){return x.length;}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"x.length\",\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":32}}},\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":33}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":34}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":34}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":34}}},[{\"start\":1,\"end\":1}]]');
    });
});


describe('global variable', () => {
    it('is substitute correctly in simple assignment', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('let a=2;function func(){a=3;}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":5}}},\"init\":{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":1,\"column\":6},\"end\":{\"line\":1,\"column\":7}}},\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":7}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":8}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":5}}},\"init\":{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":1,\"column\":6},\"end\":{\"line\":1,\"column\":7}}},\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":7}}}]},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":21}}},\"params\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":25}}},\"right\":{\"type\":\"Identifier\",\"name\":\"3\",\"loc\":{\"start\":{\"line\":1,\"column\":26},\"end\":{\"line\":1,\"column\":27}}},\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":27}}},\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":28}}}],\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":29}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":8},\"end\":{\"line\":1,\"column\":29}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":29}}},[{\"start\":1,\"end\":1}]]');
    });
    it('is coloring correctly in if assignment', () => {
        assert.equal(
            JSON.stringify(color_code('let a=2;function func(x){if(a<x){return a;}else{return x;}}',[1])), 
            '[{\"line\":1,\"cond\":false,\"type\":\"if\"}]');
    });
    it('is coloring correctly in return statement', () => {
        assert.equal(
            JSON.stringify(color_code('let a=2;function func(x){a=a+3;if(a<x){a=a+x;return a;};return a+2;}',[1])), 
            '[{\"line\":1,\"cond\":false,\"type\":\"if\"}]');
    });
});

describe('arguments', () => {
    it('is substitute correctly in simple assignment', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x,y,z){x=3;y=x+z;return z;}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":1,\"column\":18},\"end\":{\"line\":1,\"column\":19}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":22}}},\"right\":{\"type\":\"Identifier\",\"name\":\"3\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":24}}},\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":25}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"right\":{\"type\":\"Identifier\",\"name\":\"x + z\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":30}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":30}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":31}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":1,\"column\":38},\"end\":{\"line\":1,\"column\":39}}},\"loc\":{\"start\":{\"line\":1,\"column\":31},\"end\":{\"line\":1,\"column\":40}}}],\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":41}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":41}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":41}}},[{\"start\":1,\"end\":1}]]');
    });
    it('is color correctly in in simple assignment', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x,y,z){x=3;y=x+z;return z;}',[1,2,3])), 
            '[]');
    });
});

describe('while statment', () => {
    it('is substitute correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x,y,z){let a=x; if(a<z.length){y=a+3;return y;}return z[a];}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":1,\"column\":18},\"end\":{\"line\":1,\"column\":19}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"init\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":28}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":29}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"init\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":28}}}]},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":34}}},\"right\":{\"type\":\"Identifier\",\"name\":\"z.length\",\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":43}}},\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":43}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":45},\"end\":{\"line\":1,\"column\":46}}},\"right\":{\"type\":\"Identifier\",\"name\":\"a + 3\",\"loc\":{\"start\":{\"line\":1,\"column\":47},\"end\":{\"line\":1,\"column\":50}}},\"loc\":{\"start\":{\"line\":1,\"column\":45},\"end\":{\"line\":1,\"column\":50}}},\"loc\":{\"start\":{\"line\":1,\"column\":45},\"end\":{\"line\":1,\"column\":51}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":58},\"end\":{\"line\":1,\"column\":59}}},\"loc\":{\"start\":{\"line\":1,\"column\":51},\"end\":{\"line\":1,\"column\":60}}}],\"loc\":{\"start\":{\"line\":1,\"column\":44},\"end\":{\"line\":1,\"column\":61}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":61}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"z[a]\",\"loc\":{\"start\":{\"line\":1,\"column\":68},\"end\":{\"line\":1,\"column\":72}}},\"loc\":{\"start\":{\"line\":1,\"column\":61},\"end\":{\"line\":1,\"column\":73}}}],\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":74}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":74}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":74}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });
    it('is color correctly', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x,y,z){let a=x; if(a<z.length){y=a+3;return y;}return z[a];}',[1,2,[1,2,3]])), 
            '[{\"line\":1,\"cond\":true,\"type\":\"if\"}]');
    });

    it('is substitute true condition correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x,y,z){let a=x; while(true){y=a+3;return y;}return z[a];}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":1,\"column\":18},\"end\":{\"line\":1,\"column\":19}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"init\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":28}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":29}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"init\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":28}}}]},{\"type\":\"WhileStatement\",\"test\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":1,\"column\":36},\"end\":{\"line\":1,\"column\":40}},\"name\":\"true\"},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":42},\"end\":{\"line\":1,\"column\":43}}},\"right\":{\"type\":\"Identifier\",\"name\":\"a + 3\",\"loc\":{\"start\":{\"line\":1,\"column\":44},\"end\":{\"line\":1,\"column\":47}}},\"loc\":{\"start\":{\"line\":1,\"column\":42},\"end\":{\"line\":1,\"column\":47}}},\"loc\":{\"start\":{\"line\":1,\"column\":42},\"end\":{\"line\":1,\"column\":48}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":55},\"end\":{\"line\":1,\"column\":56}}},\"loc\":{\"start\":{\"line\":1,\"column\":48},\"end\":{\"line\":1,\"column\":57}}}],\"loc\":{\"start\":{\"line\":1,\"column\":41},\"end\":{\"line\":1,\"column\":58}}},\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":58}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"z[a]\",\"loc\":{\"start\":{\"line\":1,\"column\":65},\"end\":{\"line\":1,\"column\":69}}},\"loc\":{\"start\":{\"line\":1,\"column\":58},\"end\":{\"line\":1,\"column\":70}}}],\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":71}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":71}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":71}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });
    it('is color true condition correctly', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x,y,z){let a=x; while(true){y=a+3;return y;}return z[a];}',[1,2,[1,2,3]])), 
            '[{\"line\":1,\"cond\":true,\"type\":\"while\"}]');
    });

    it('is substitute condition inside if correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x){let a=x+1;if(a>8){while(a<10){x=x+1;}return a;}}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":22}}},\"init\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":26}}},\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":26}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":27}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":22}}},\"init\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":26}}},\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":26}}}]},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":31}}},\"right\":{\"type\":\"Identifier\",\"name\":\"8\",\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":33}}},\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":33}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"WhileStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":41},\"end\":{\"line\":1,\"column\":42}}},\"right\":{\"type\":\"Identifier\",\"name\":\"10\",\"loc\":{\"start\":{\"line\":1,\"column\":43},\"end\":{\"line\":1,\"column\":45}}},\"loc\":{\"start\":{\"line\":1,\"column\":41},\"end\":{\"line\":1,\"column\":45}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":47},\"end\":{\"line\":1,\"column\":48}}},\"right\":{\"type\":\"Identifier\",\"name\":\"x + 1\",\"loc\":{\"start\":{\"line\":1,\"column\":49},\"end\":{\"line\":1,\"column\":52}}},\"loc\":{\"start\":{\"line\":1,\"column\":47},\"end\":{\"line\":1,\"column\":52}}},\"loc\":{\"start\":{\"line\":1,\"column\":47},\"end\":{\"line\":1,\"column\":53}}}],\"loc\":{\"start\":{\"line\":1,\"column\":46},\"end\":{\"line\":1,\"column\":54}}},\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":54}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":61},\"end\":{\"line\":1,\"column\":62}}},\"loc\":{\"start\":{\"line\":1,\"column\":54},\"end\":{\"line\":1,\"column\":63}}}],\"loc\":{\"start\":{\"line\":1,\"column\":34},\"end\":{\"line\":1,\"column\":64}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":64}}}],\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":65}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":65}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":65}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });
    it('is color condition inside if correctly', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x){let a=x+1;if(a>8){while(a<10){x=x+1;}return a;}}',[1])), 
            '[{\"line\":1,\"cond\":false,\"type\":\"if\"},{\"line\":1,\"cond\":false,\"type\":\"while\"}]');
    });
});

describe('if else if statment', () => {
    it('is color correctly', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x){let a=x+3;let b=2; if(x<a+b){b=a+1;return b;}else if(x<a){return a+2;}return b+1;}',[1])), 
            '[{\"line\":1,\"cond\":true,\"type\":\"if\"},{\"line\":1,\"cond\":false,\"type\":\"if\"}]');
    });
});

describe('double if statment', () => {
    it('is substitute correctly', () => {
        assert.equal(
            JSON.stringify(symbolic_substitutio('function func(x,y){let a=x+1;let b=0; if(a>y){b=y+1;if(a<y+b){b=b+3;}}return b;}')), 
            '[{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"func\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":13}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":15}}},{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"init\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":28}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":19},\"end\":{\"line\":1,\"column\":29}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"init\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":28}}},\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":28}}}]},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":34}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":36}}},\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":36}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":29},\"end\":{\"line\":1,\"column\":37}},\"body\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":34}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":36}}},\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":36}}}]},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":41},\"end\":{\"line\":1,\"column\":42}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":43},\"end\":{\"line\":1,\"column\":44}}},\"loc\":{\"start\":{\"line\":1,\"column\":41},\"end\":{\"line\":1,\"column\":44}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":1,\"column\":46},\"end\":{\"line\":1,\"column\":47}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y + 1\",\"loc\":{\"start\":{\"line\":1,\"column\":48},\"end\":{\"line\":1,\"column\":51}}},\"loc\":{\"start\":{\"line\":1,\"column\":46},\"end\":{\"line\":1,\"column\":51}}},\"loc\":{\"start\":{\"line\":1,\"column\":46},\"end\":{\"line\":1,\"column\":52}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":55},\"end\":{\"line\":1,\"column\":56}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y + y + 1\",\"loc\":{\"start\":{\"line\":1,\"column\":57},\"end\":{\"line\":1,\"column\":60}}},\"loc\":{\"start\":{\"line\":1,\"column\":55},\"end\":{\"line\":1,\"column\":60}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":1,\"column\":62},\"end\":{\"line\":1,\"column\":63}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y + 1 + 3\",\"loc\":{\"start\":{\"line\":1,\"column\":64},\"end\":{\"line\":1,\"column\":67}}},\"loc\":{\"start\":{\"line\":1,\"column\":62},\"end\":{\"line\":1,\"column\":67}}},\"loc\":{\"start\":{\"line\":1,\"column\":62},\"end\":{\"line\":1,\"column\":68}}}],\"loc\":{\"start\":{\"line\":1,\"column\":61},\"end\":{\"line\":1,\"column\":69}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":52},\"end\":{\"line\":1,\"column\":69}}}],\"loc\":{\"start\":{\"line\":1,\"column\":45},\"end\":{\"line\":1,\"column\":70}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":38},\"end\":{\"line\":1,\"column\":70}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":77},\"end\":{\"line\":1,\"column\":78}}},\"loc\":{\"start\":{\"line\":1,\"column\":70},\"end\":{\"line\":1,\"column\":79}}}],\"loc\":{\"start\":{\"line\":1,\"column\":18},\"end\":{\"line\":1,\"column\":80}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":80}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":80}}},[{\"start\":1,\"end\":1},{\"start\":1,\"end\":1},{\"start\":1,\"end\":1}]]');
    });
    it('is color correctly', () => {
        assert.equal(
            JSON.stringify(color_code('function func(x,y){let a=x+1;let b=0; if(a>y){b=y+1;if(a<y+b){b=b+3;}}return b;}',[1,2])), 
            '[{\"line\":1,\"cond\":false,\"type\":\"if\"},{\"line\":1,\"cond\":false,\"type\":\"if\"}]');
    });
});